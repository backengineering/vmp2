# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
endif()

project(vmprofiler)

# Target: vmprofiler
set(vmprofiler_SOURCES
	cmake.toml
	"include/calc_jmp.hpp"
	"include/scn.hpp"
	"include/transform.hpp"
	"include/vmctx.hpp"
	"include/vmhandlers.hpp"
	"include/vminstrs.hpp"
	"include/vmlocate.hpp"
	"include/vmp2.hpp"
	"include/vmprofiler.hpp"
	"include/vmprofiles.hpp"
	"include/vmutils.hpp"
	"src/calc_jmp.cpp"
	"src/scn.cpp"
	"src/vmctx.cpp"
	"src/vmhandler.cpp"
	"src/vminstrs.cpp"
	"src/vmlocate.cpp"
	"src/vmprofiles/add.cpp"
	"src/vmprofiles/call.cpp"
	"src/vmprofiles/div.cpp"
	"src/vmprofiles/idiv.cpp"
	"src/vmprofiles/imul.cpp"
	"src/vmprofiles/jmp.cpp"
	"src/vmprofiles/lconst.cpp"
	"src/vmprofiles/lflags.cpp"
	"src/vmprofiles/lreg.cpp"
	"src/vmprofiles/mul.cpp"
	"src/vmprofiles/nand.cpp"
	"src/vmprofiles/popvsp.cpp"
	"src/vmprofiles/pushvsp.cpp"
	"src/vmprofiles/rdtsc.cpp"
	"src/vmprofiles/read.cpp"
	"src/vmprofiles/readcr3.cpp"
	"src/vmprofiles/readcr8.cpp"
	"src/vmprofiles/shl.cpp"
	"src/vmprofiles/shld.cpp"
	"src/vmprofiles/shr.cpp"
	"src/vmprofiles/shrd.cpp"
	"src/vmprofiles/sreg.cpp"
	"src/vmprofiles/vmexit.cpp"
	"src/vmprofiles/write.cpp"
	"src/vmprofiles/writecr3.cpp"
	"src/vmutils.cpp"
)

add_library(vmprofiler STATIC)

target_sources(vmprofiler PRIVATE ${vmprofiler_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${vmprofiler_SOURCES})

target_compile_definitions(vmprofiler PUBLIC
	NOMINMAX
)

target_compile_features(vmprofiler PUBLIC
	cxx_std_20
)

target_include_directories(vmprofiler PUBLIC
	include
)

target_link_libraries(vmprofiler PUBLIC
	Zydis
	linux-pe
)
